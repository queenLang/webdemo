package com.review;

/**
 * Created by dllo on 18/5/7.
 */
public class Main {
    public static void main(String[] args) {
        /**
         * day01
         * 基本数据类型 整数  byte short int long (长度不同)
         * 浮点 float double\ (精度不同)
         * 字符 char
         * 布尔 Boolean (true )
         *
         * 变量的命名规范: 1 可以由数字 字母 下划线 美元符号组成  但不能以数字开头
         *              2 见名知意
         *              3 不能重复命名
         *              4 不能使用系统关键字
         *              驼峰规则
         * 数学运算符:
         *相同数据类型做数学运算结果还是原来的类型
         * 整型/浮点型 = 浮点型
         *
         * += -= *= /= %=
         * a+=b  ---->a =a+b;
         * a++  ++a  先赋值再运算  先运算再赋值
         *
         * 取百位数
         * ABC   a= abc /100
         *       b= adc %100/10
         *       c= adc % 10
         *
         *day02 分支结构
         * if
         * if ...else..
         * if ... else if...
         * 条件表达式 ------->结果  ture/false
         *
     #    * 三目运算符:
         *  条件?true的内容 : false 的内容
         *
         *  随机数
         *  new Random.nextInt (max-min+1)+min
         *   new Random() 取值范围 0~1 左闭右开 包括0 不包括1
         *
         *   switch ...case...default... 语句
         *   switch(byte short int String char 枚举类 包装类)
         *   break 关键字 跳出代码块
         *   default 无论放在哪一个位置 都是当case没有判断成功后执行
         *   if 和switch使用场景
         *   if 多用于判断某一范围  无确定值
         *   switch 可以判断具体的内容
         *
         * day 03
         * while(条件表达式){
         *     执行条件;
         * }
         *
         * do{
         *     执行内容
         * }while (条件)
         *
         * for(1,2,3){   ...循环
         *     4;
         * }
         * 执行顺序 1-->2-->4-->3  2-->4--->3....
         *
         * 循环嵌套
         * for(1,2,3){
         *   for(4,5,6){
         *       7
         *   }
         * }
         * 数组:
         * 定义数组的3种形式
         * int[] arr = new int[长度];
         * int[] arr = {1,2,3,4};
         * int arr[] = {1,2,3,4};
         *  整型 0 浮点型  0.0  字符 方块
         *
         *  arr.lenght
         *  索引(下标) 从0 开始计数
         *  arr[3]
         *  arr[1]= 7 给数组中某一元素赋值
         *
         *  冒泡排序
         *
      #   *  数组越界异常 下标 >=数组的长度
         *
         *
         *java 核心思想
         *  面向对象 : 现有对象  通过对象的属性完成需求
         * 类?  对象?
         * 类 :具有相同属性的行为方式
         * 对象: 类的具体实例
         *
         * public class 类名{
         *
         * }
         *
         * 类名 AA = new 构造方法 ();

         * 方法
         *
         *  public void a(){
         *
         *  }
         * public String b(){
         *     return;
         * }
         * public void c(x,y){
         *
         * }
         *public int d(x,y){
         *     return;
         *}
         *
         *调用  对象.方法
         *
         * 递归 方法调用自己本身
         *
         * 形参? 实参?
         * 形参 :在编写方法的时候写在()中 用于占位
         * 实参: 在调用调用方法时 写的真正内容
         *
         *构造方法
         * 用于初始化对象
         * 修饰符 类名 (参数){
         *     this 关键字  本类
         * }
         *
         *
         * private String name; name 成员变量
         *
         *  java 三大特性 封装 继承 多态
         *
         *  继承 extends
         *  父类  子类
         *java只支持单继承
         * 所以的对象都用一个祖宗  Object
         *
         * 关键字  super父类
         * super()调用父类构造方法
         * super.XXX()调用XXX方法
         * 重写  在子类定义父类的同名方法
         * 重载 方法重载 (在同一个类)方法名相同 参数列表不同参数  (个数不同||顺序不同||类型不同)
         *
         */
        //抽象类
         //       * 抽象方法 没有具体方法体的方法  并且用abstract关键字修饰的方法
        // * 含有抽象方法的类 就是抽象类
        // * 若子类继承了 抽象类  必须要将所以的抽象方法全部复写
        // *
        // * 含有抽象方法的类一定是抽象类
         //       * 抽象类不一定含有抽象方法
         //       */
        
        /**
         *
         * 关键字 final
         * 被final修饰的类  不能被继承
         * 被 final修饰的方法不能被复写
         * 被final修饰的量不能被更改
         */
        /**
         *  接口是一种规则
         * 接口中只能定义抽象方法  以及全局常量\
         * 接口中的抽象方法会自动隐藏 public abstract 等关键字
         * 接口变像的实现了多继承
         */
        /**
         *
         * 多态----->1. 必须要有的条件继承
         *          2.要有复写
         *          3.父类引用指向子类对象
         * Animal animal1 = new Bird();向下转型
         *  Bird bird1 = (Bird) new Animal();向上转型
         *  向上转型 强制类型转换操作
         *
         *  创建接口对象使用的是其 实现类
         *
         *
         *  java 三大特性
         *  封装  继承  多态
         *  1.封装 : 隐藏内部细节对外提供接口 ,方法
         *    封装是一种思想
         *    使用场景
         *    将复杂的逻辑功能写在某个类中
         *    只要创建该类对象(也可以不创建对象)调用方法就可以完成需求
         */




    }
}
